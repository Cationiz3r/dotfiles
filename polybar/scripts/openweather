#!/bin/sh
# polybar weather module, powered by openweather

# Output
out() { echo "  %{B$BACKGROUND F$BACKGROUND}|%{B$BACKGROUND_ALT F-}  $@"; }
out_simple() { out "$data_icon %{T2}$data_feel%{T-}°C"; }
out_detailed() {
	out "$data_desc %{T2}$data_feel%{T-}($data_temp)°C $data_humid%"
}

# Source private config
. $POLYBAR_ROOT/.priv/openweather.conf
[ -z "$conf_apikey" ] || [ -z "conf_cityid" ] && { echo "err: missing config"; exit 1; }
cache="$POLYBAR_RUN/openweather"

# Network
waitonline() {
	out ..\?
	for i in $(seq 1 30); do
		ping -c1 archlinux.org >/dev/null 2>&1 && break; sleep 2
	done
}
getdata() {
	curl -s "https://api.openweathermap.org/data/2.5/weather?\
appid=$conf_apikey&id=$conf_cityid&units=metric" >"$cache"
}

# Parsing
icon() {
	case "$1" in
	01d) echo ;; #Clear
	01n) echo ;; #Clear night
	02?|03?|04?) echo ;; #Clouds
	09?) echo ;; #Shower
	10?) echo ;; #Heavy rain
	11?) echo ;; #Thunderstorm
	13?) echo ;; #Snow
	50?) echo ;; #Fog
	*)   echo ;; #Unknown
	esac
}
parsejson() {
	<"$cache" jq -r '.cod, (.main|.temp, .feels_like, .humidity), (.weather[0]|.description, .icon)'|\
		for var in data_cod data_temp data_feel data_humid data_desc data_icon; do
		read data
		printf $var=
		case $var in
		data_temp|data_feel) echo "($data+.5)/1"|bc;;
		data_desc) echo \'$data\'|sed -E 's/\b(.*)/\u\1/g';;
		data_icon) icon $data;;
		*) echo $data;;
		esac
	done
}

# Signal handling
force() { ps -p $sleep_pid >/dev/null && kill $sleep_pid; }
switch() {
	force
	touch "$cache.skip"
	echo $((1-$(cat "$cache.mode"))) >"$cache.mode"
}
trap 'force; exit' INT
trap force USR2 EXIT
trap switch USR1

# Main loop
echo 0 >"$cache.mode"
while true; do
	[ -f "$cache.skip" ] || { waitonline; out ...; }
	mode=$(cat "$cache.mode")
	rm -f "$cache.skip"
	[ -s "$cache" ] || { getdata; }
	eval $(parsejson)
	if [ "$data_cod" = 200 ]; then
		[ $mode -eq 0 ] && out_simple || out_detailed
	else echo #Hide module if parse is empty
	fi
	sleep 10m & sleep_pid=$!
	wait
	[ -f "$cache.skip" ] || rm -f "$cache"
done
